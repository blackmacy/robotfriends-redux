{"ast":null,"code":"import{CHANGE_SEARCH_FIELD,REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_FAILED}from'./constants.js';// return an object\nexport var setSearchField=function setSearchField(text){return{type:CHANGE_SEARCH_FIELD,// capitalized bcz is CONSTANT\npayload:text};};// return a function, will caught by redux-thunk\nexport var requestRobots=function requestRobots(){return function(dispatch){dispatch({type:REQUEST_ROBOTS_PENDING});fetch('https://jsonplaceholder.typicode.com/users').then(function(response){return response.json();}).then(function(data){return dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data});}).catch(function(error){return dispatch({type:REQUEST_ROBOTS_FAILED,payload:error});});};};","map":{"version":3,"sources":["/Users/yijinlee/Documents/The-Complete-Web-Developer/Redux/robotfriends-redux/src/actions.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchField","text","type","payload","requestRobots","dispatch","fetch","then","response","json","data","catch","error"],"mappings":"AAAA,OACCA,mBADD,CAECC,sBAFD,CAGCC,sBAHD,CAICC,qBAJD,KAKO,gBALP,CAQA;AACA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,IAAD,QAAW,CACxCC,IAAI,CAAEN,mBADkC,CACZ;AAC5BO,OAAO,CAAEF,IAF+B,CAAX,EAAvB,CAMP;AACA,MAAO,IAAMG,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,SAAM,UAACC,QAAD,CAAc,CAChDA,QAAQ,CAAC,CAAEH,IAAI,CAAEL,sBAAR,CAAD,CAAR,CACAS,KAAK,CAAC,4CAAD,CAAL,CACGC,IADH,CACQ,SAAAC,QAAQ,QAAGA,CAAAA,QAAQ,CAACC,IAAT,EAAH,EADhB,EAEGF,IAFH,CAEQ,SAAAG,IAAI,QAAIL,CAAAA,QAAQ,CAAC,CAACH,IAAI,CAAEJ,sBAAP,CAA+BK,OAAO,CAAEO,IAAxC,CAAD,CAAZ,EAFZ,EAGGC,KAHH,CAGS,SAAAC,KAAK,QAAIP,CAAAA,QAAQ,CAAE,CAAEH,IAAI,CAAEH,qBAAR,CAA+BI,OAAO,CAAES,KAAxC,CAAF,CAAZ,EAHd,EAIA,CAN4B,EAAtB","sourcesContent":["import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants.js'\n\n\n// return an object\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,  // capitalized bcz is CONSTANT\n\tpayload: text\n})\n\n\n// return a function, will caught by redux-thunk\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response=> response.json())\n\t\t\t.then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n\t\t\t.catch(error => dispatch( { type: REQUEST_ROBOTS_FAILED, payload: error}))\n}"]},"metadata":{},"sourceType":"module"}